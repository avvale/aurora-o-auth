
type OAuthApplication
{
    id: ID!
    name: GraphQLString!
    code: GraphQLString!
    secret: GraphQLString!
    isMaster: GraphQLBoolean!
    clients: [OAuthClient]
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
}

input OAuthCreateApplicationInput
{
    id: ID!
    name: GraphQLString!
    code: GraphQLString!
    secret: GraphQLString!
    isMaster: GraphQLBoolean!
    clientIds: [ID]
}

input OAuthUpdateApplicationByIdInput
{
    id: ID!
    name: GraphQLString
    code: GraphQLString
    secret: GraphQLString
    isMaster: GraphQLBoolean
    clientIds: [ID]
}

input OAuthUpdateApplicationsInput
{
    id: ID
    name: GraphQLString
    code: GraphQLString
    secret: GraphQLString
    isMaster: GraphQLBoolean
    clientIds: [ID]
}

type Query
{
    oAuthFindApplication(query: QueryStatement constraint: QueryStatement): OAuthApplication
    oAuthFindApplicationById(id: ID constraint: QueryStatement): OAuthApplication
    oAuthGetApplications(query: QueryStatement constraint: QueryStatement): [OAuthApplication]!
    oAuthPaginateApplications(query: QueryStatement constraint: QueryStatement): Pagination!
}

type Mutation
{
    oAuthCreateApplication(payload: OAuthCreateApplicationInput!): OAuthApplication
    oAuthCreateApplications(payload: [OAuthCreateApplicationInput]!): Boolean!
    oAuthUpdateApplicationById(payload: OAuthUpdateApplicationByIdInput! constraint: QueryStatement): OAuthApplication
    oAuthUpdateApplications(payload: OAuthUpdateApplicationsInput! query: QueryStatement constraint: QueryStatement): [OAuthApplication]!
    oAuthDeleteApplicationById(id: ID! constraint: QueryStatement): OAuthApplication
    oAuthDeleteApplications(query: QueryStatement constraint: QueryStatement): [OAuthApplication]!
}