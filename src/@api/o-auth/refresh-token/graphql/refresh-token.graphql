
type OAuthRefreshToken
{
    id: ID!
    accessTokenId: ID!
    accessToken: OAuthAccessToken
    token: GraphQLString!
    isRevoked: GraphQLBoolean!
    expiresAt: GraphQLTimestamp
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
}

input OAuthCreateRefreshTokenInput
{
    id: ID!
    accessTokenId: ID!
    token: GraphQLString!
    isRevoked: GraphQLBoolean!
    expiresAt: GraphQLTimestamp
}

input OAuthUpdateRefreshTokenByIdInput
{
    id: ID!
    accessTokenId: ID
    token: GraphQLString
    isRevoked: GraphQLBoolean
    expiresAt: GraphQLTimestamp
}

input OAuthUpdateRefreshTokensInput
{
    id: ID
    accessTokenId: ID
    token: GraphQLString
    isRevoked: GraphQLBoolean
    expiresAt: GraphQLTimestamp
}

type Query
{
    oAuthFindRefreshToken(
        query: QueryStatement
        constraint: QueryStatement
    ): OAuthRefreshToken

    oAuthFindRefreshTokenById(
        id: ID
        constraint: QueryStatement
    ): OAuthRefreshToken

    oAuthGetRefreshTokens(
        query: QueryStatement
        constraint: QueryStatement
    ): [OAuthRefreshToken]!

    oAuthPaginateRefreshTokens(
        query: QueryStatement
        constraint: QueryStatement
    ): Pagination!

}

type Mutation
{
    oAuthDeleteRefreshTokenById(
        id: ID!
        constraint: QueryStatement
    ): OAuthRefreshToken

    oAuthDeleteRefreshTokens(
        query: QueryStatement
        constraint: QueryStatement
    ): [OAuthRefreshToken]!

}