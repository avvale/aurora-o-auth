
type IamTenant
{
    id: ID!
    name: GraphQLString!
    code: GraphQLString
    logo: GraphQLString
    isActive: GraphQLBoolean!
    meta: JSON
    accounts: [IamAccount]
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
}

input IamCreateTenantInput
{
    id: ID!
    name: GraphQLString!
    code: GraphQLString
    logo: GraphQLString
    isActive: GraphQLBoolean!
    accountIds: [ID]
}

input IamUpdateTenantByIdInput
{
    id: ID!
    name: GraphQLString
    code: GraphQLString
    logo: GraphQLString
    isActive: GraphQLBoolean
    accountIds: [ID]
}

input IamUpdateTenantsInput
{
    id: ID
    name: GraphQLString
    code: GraphQLString
    logo: GraphQLString
    isActive: GraphQLBoolean
    accountIds: [ID]
}

type Query
{
    iamFindTenant(
        query: QueryStatement
        constraint: QueryStatement
    ): IamTenant

    iamFindTenantById(
        id: ID
        constraint: QueryStatement
    ): IamTenant

    iamGetTenants(
        query: QueryStatement
        constraint: QueryStatement
    ): [IamTenant]!

    iamPaginateTenants(
        query: QueryStatement
        constraint: QueryStatement
    ): Pagination!

}

type Mutation
{
    iamCreateTenant(
        payload: IamCreateTenantInput!
    ): IamTenant

    iamCreateTenants(
        payload: [IamCreateTenantInput]!
    ): Boolean!

    iamUpdateTenantById(
        payload: IamUpdateTenantByIdInput!
        constraint: QueryStatement
    ): IamTenant

    iamUpdateTenants(
        payload: IamUpdateTenantsInput!
        query: QueryStatement
        constraint: QueryStatement
    ): [IamTenant]!

    iamUpsertTenant(
        payload: IamUpdateTenantByIdInput!
    ): IamTenant

    iamDeleteTenantById(
        id: ID!
        constraint: QueryStatement
    ): IamTenant

    iamDeleteTenants(
        query: QueryStatement
        constraint: QueryStatement
    ): [IamTenant]!

}