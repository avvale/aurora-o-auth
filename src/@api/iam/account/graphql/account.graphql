enum IamAccountType {
    USER
    SERVICE
}

type IamAccount
{
    id: ID!
    type: IamAccountType!
    code: GraphQLString
    email: GraphQLString!
    isActive: GraphQLBoolean!
    clientId: ID!
    client: OAuthClient
    dApplicationCodes: JSON!
    dPermissions: JSON!
    dTenants: JSON!
    dScopes: JSON
    data: JSON
    roles: [IamRole]
    tenants: [IamTenant]
    user: IamUser
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
}

input IamCreateAccountInput
{
    id: ID!
    type: IamAccountType!
    code: GraphQLString
    email: GraphQLString!
    isActive: GraphQLBoolean!
    clientId: ID!
    dApplicationCodes: JSON!
    dPermissions: JSON!
    dTenants: JSON!
    dScopes: JSON
    data: JSON
    roleIds: [ID]
    tenantIds: [ID]
    user: IamCreateUserInput
}

input IamUpdateAccountByIdInput
{
    id: ID!
    type: IamAccountType
    code: GraphQLString
    email: GraphQLString
    isActive: GraphQLBoolean
    clientId: ID
    dApplicationCodes: JSON
    dPermissions: JSON
    dTenants: JSON
    dScopes: JSON
    data: JSON
    roleIds: [ID]
    tenantIds: [ID]
    user: IamUpdateUserByIdInput
}

input IamUpdateAccountsInput
{
    id: ID
    type: IamAccountType
    code: GraphQLString
    email: GraphQLString
    isActive: GraphQLBoolean
    clientId: ID
    dApplicationCodes: JSON
    dPermissions: JSON
    dTenants: JSON
    dScopes: JSON
    data: JSON
    roleIds: [ID]
    tenantIds: [ID]
    user: IamUpdateUsersInput
}

type Query
{
    iamMeAccount: IamAccount
    iamFindAccount(query: QueryStatement constraint: QueryStatement): IamAccount
    iamFindAccountById(id: ID constraint: QueryStatement): IamAccount
    iamGetAccounts(query: QueryStatement constraint: QueryStatement): [IamAccount]!
    iamPaginateAccounts(query: QueryStatement constraint: QueryStatement): Pagination!
}

type Mutation
{
    iamCreateAccount(payload: IamCreateAccountInput!): IamAccount
    iamCreateAccounts(payload: [IamCreateAccountInput]!): Boolean!
    iamUpdateAccountById(payload: IamUpdateAccountByIdInput! constraint: QueryStatement): IamAccount
    iamUpdateAccounts(payload: IamUpdateAccountsInput! query: QueryStatement constraint: QueryStatement): [IamAccount]!
    iamDeleteAccountById(id: ID! constraint: QueryStatement): IamAccount
    iamDeleteAccounts(query: QueryStatement constraint: QueryStatement): [IamAccount]!
}